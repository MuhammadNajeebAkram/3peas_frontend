/*
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}
*/

import { Inter } from "next/font/google";
import "@/styles/globals.module.css"
import { AppBar, Box, Drawer, CssBaseline, Divider, List, Link, ListItem, ListItemButton, Button, ListItemIcon, ListItemText, Toolbar, Typography, IconButton, colors, Stack } from '@mui/material';
import { CenterFocusStrong, Height, Menu } from '@mui/icons-material';
import { useTheme } from '@mui/material/styles';
import MenuIcon from '@mui/icons-material/Menu';
import { blue, blueGrey } from "@mui/material/colors";
import DrawerComponent from "@/components/Layout/DrawerComponent";

const inter = Inter({ subsets: ["latin"] });
const drawerWidth = 200;
const navItems = ['Home', 'About', 'Contact'];
const API_URL = process.env.PUBLIC_API_URL;


export default function Layout({ children }) {
  return (
    <html lang="en">
      <body> 
        <AppBar component="nav" sx={{ backgroundColor: '#FFF' }}>
          <Toolbar>
            <IconButton
              color="inherit"
              aria-label="open drawer"
              edge="start"
              sx={{ mr: 2, display: { sm: 'none' } }}
            >
              <MenuIcon />
            </IconButton>
            
            <Box sx={{ display: { xs: 'none', sm: 'block' }, marginLeft: 100 }}>
              {navItems.map((item) => (
                <Button key={item} sx={{ color: '#000' }}>
                  {item}
                </Button>
              ))}
            </Box>
          </Toolbar>
        </AppBar>
        {/* Side Panel */}
        <DrawerComponent responseData={responseData}/>
        <div className="flex-grow p-6 md:overflow-y-auto md:p-12 bg-white">{children}</div>
      </body>
    </html>
  );
}

export async function getServerSideProps(context) {
  // Replace with the actual API endpoint URL
 

  try {
    const response = await fetch(API_URL + "getClasses");

    // Check for successful response
   /* if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`);
    }
*/
    const data = await response.json();
    if (data.success == 1){
      const responseData = data.response;
      return { props: { responseData } };
    }
    

    // Return the fetched data as props
    
  } catch (error) {
    console.error("Error fetching data:", error); Â  


    // Optionally handle errors gracefully, e.g., redirect to an error page
    return {
      notFound: true, // Or redirect to an error page with a specific status code
    };
  }
}
